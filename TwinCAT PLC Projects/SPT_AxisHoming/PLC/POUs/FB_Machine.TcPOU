<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Machine" Id="{f8df3025-e6cd-4a3e-a29b-8917de0b32ac}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Machine EXTENDS FB_PackML_BaseModule
VAR
	VAxis	  : FB_Component_BasicAxis := (Name := 'V Axis');
	Home	  : BOOL;
	AxisHomed : BOOL;

	//Home Commands
	HomeAbs		 : BOOL;
	HomeHardStop : BOOL;
	HomeSetPos	 : BOOL;
	HomeCalCam	 : BOOL;

	//Homing Options
	AbsHoming	   : FB_HomeRoutine_AbsHoming;
	HardStopHoming : FB_HomeRoutine_HardStop;
	SetPosition	   : FB_HomeRoutine_SetPosition;
	CalibrationCam : FB_HomeRoutine_CalibrationCam;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="CyclicLogic" Id="{d7486b44-d47b-4c78-a1ca-2d7ba2bc35b9}">
      <Declaration><![CDATA[//! @summary This method serves as the entry point for all underlying FB logic

//! @description This method should be called cyclically by descendant function blocks by invoking <c>SUPER^.CyclicLogic()</c>.  Alternatively, the contents of this method could be reimplemented entirely in which case a call to this method would not be necessary.
METHOD PUBLIC CyclicLogic
VAR
	i : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _InitComplete THEN
	_InitComplete := Initialize();
	RETURN;
END_IF

SUPER^.CyclicLogic();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Execute" Id="{57e2d5d2-9c91-4388-941d-cf82dd454007}">
      <Declaration><![CDATA[//! @summary This method contains code which will execute when this PackML module is in the <b>Execute</b> state
METHOD PROTECTED Execute
(*! <description> <b>The base implementation of this method is empty. User must override this method to provide functionality.</b>
<table> 
	<tr>
		<th> Previous State </th>
		<th> Transition In </th>
		<th> Transition Out </th>
		<th> Next State  </th> 
	</tr>
	<tr>
		<td> Starting<b>-or-</b>Unholding <b>-or-</b>Unsuspending</td>
		<td> State Complete<i>(Starting<b>-or-</b>Unholding<b>-or-</b>Unsuspending)</i></td> 
		<td> State Complete<b>-or-</b>Hold Command<b>-or-</b>Suspend Command</td>
		<td> Completing<b>-or-</b>Holding<b>-or-</b>Suspending</td>
	</tr>
</table>
This method is called as required by <c>StateControl()</c>
</description> 

*)
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE SequenceState OF
	0:
		IF HomeAbs THEN
			HomeAbs			 := FALSE;
			VAxis.HomeMethod := AbsHoming;
			SequenceState	 := SequenceState + 10;
		END_IF

		IF HomeHardStop THEN
			HomeHardStop	 := FALSE;
			VAxis.HomeMethod := HardStopHoming;
			SequenceState	 := SequenceState + 10;
		END_IF

		IF HomeSetPos THEN
			HomeSetPos		 := FALSE;
			VAxis.HomeMethod := SetPosition;
			SequenceState	 := SequenceState + 10;
		END_IF

		IF HomeCalCam THEN
			HomeCalCam		 := FALSE;
			VAxis.HomeMethod := CalibrationCam;
			SequenceState	 := SequenceState + 10;
		END_IF

	10:
		IF VAxis.Home() THEN
			SequenceState := SequenceState + 10;
		END_IF

	20:
		IF VAxis.Axis.Status.Homed THEN
			SequenceState := SequenceState + 10;
		END_IF

	30:
		AxisHomed := TRUE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="hmip" Id="{e75c7597-d2aa-47da-93f3-7c33ab093918}">
      <Declaration><![CDATA[METHOD hmip
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AllowHMIControl(ThisModuleOnly := TRUE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="HMIPermissions" Id="{3903a1f5-9d44-4d86-8c3e-9c3977e99dc0}">
      <Declaration><![CDATA[// Automatically enables and disables HMI control based on the PackML mode
METHOD PROTECTED HMIPermissions

// This method is called cyclically by CyclicLogic()]]></Declaration>
      <Implementation>
        <ST><![CDATA[AllowHMIControl(ThisModuleOnly := TRUE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{db5d8948-38cd-4e0f-8416-5aad9f149e88}">
      <Declaration><![CDATA[//! @summary Basic module initialization logic
METHOD PROTECTED Initialize : BOOL;
VAR
	i						 : UDINT;
	varInfo					 : __SYSTEM.VAR_INFO;
	AllSubUnitsInitialized	 : BOOL := TRUE;
	AllComponentsInitialized : BOOL := TRUE;
END_VAR

//! @description This method is called by <c>CyclicLogic()</c> as required]]></Declaration>
      <Implementation>
        <ST><![CDATA[Initialize := FALSE;
CASE DescendantSequenceState OF
	0:
		RegisterComponent(Component := VAxis);
		DescendantSequenceState := DescendantSequenceState + 10;

	10:
		IF SUPER^.Initialize() THEN
			Initialize := TRUE;
		END_IF
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Starting" Id="{3d1b53cb-4fac-4d3d-9bee-04f00ee33a88}">
      <Declaration><![CDATA[//! @summary This method contains code which will execute when this PackML module is in the <b>Starting</b> state
METHOD PROTECTED Starting
VAR
	i				: UDINT;
	SubModulesReady : BOOL := TRUE;
END_VAR

(*! <description><b></b><table> 
	<tr>
		<th> Previous State </th>
		<th> Transition In </th>
		<th> Transition Out </th>
		<th> Next State  </th> 
	</tr>
	<tr>
		<td> Idle </td>
		<td> Start Command </td> 
		<td> State Complete </td>
		<td> Execute </td> 
	</tr>
</table>
This method is called as required by <c>StateControl()</c>
</description> 

*)]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE SequenceState OF
	0:
		NoStateTasksToComplete := FALSE;
		SequenceState		   := SequenceState + 10;

	10:
		IF VAxis.Enable() THEN
			SequenceState := SequenceState + 10;
		END_IF

	20:
		IF VAxis.Enabled THEN
			SequenceState := SequenceState + 10;
		END_IF

	30:
		StateTasksComplete := TRUE;
END_CASE

SUPER^.Starting();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>