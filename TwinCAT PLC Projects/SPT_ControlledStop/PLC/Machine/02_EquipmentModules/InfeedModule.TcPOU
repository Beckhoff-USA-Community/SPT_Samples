<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="InfeedModule" Id="{76aab0a3-2381-4d9d-a825-dafde1ec23bf}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK InfeedModule EXTENDS FB_PackML_BaseModule
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="CyclicLogic" Id="{b56ad18f-453b-4183-a853-5b8d97a37ec6}">
      <Declaration><![CDATA[//! @summary This method serves as the entry point for all underlying FB logic

//! @description This method should be called cyclically by descendant function blocks by invoking <c>SUPER^.CyclicLogic()</c>.  Alternatively, the contents of this method could be reimplemented entirely in which case a call to this method would not be necessary.
METHOD PUBLIC CyclicLogic
VAR
	i : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _InitComplete THEN
	_InitComplete := Initialize();
	RETURN;
END_IF

SUPER^.CyclicLogic();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{9c852996-617e-486f-b4eb-534d46aa5a77}">
      <Declaration><![CDATA[//! @summary Basic module initialization logic
METHOD PROTECTED Initialize : BOOL;
VAR
	i						 : UDINT;
	varInfo					 : __SYSTEM.VAR_INFO;
	AllSubUnitsInitialized	 : BOOL := TRUE;
	AllComponentsInitialized : BOOL := TRUE;
END_VAR

//! @description This method is called by <c>CyclicLogic()</c> as required]]></Declaration>
      <Implementation>
        <ST><![CDATA[Initialize := FALSE;
CASE DescendantSequenceState OF
	0: //Register Modules

		//Register Components

		//Setup Config
		_LogModeChanges			:= FALSE;
		_LogStateChanges		:= FALSE;
		DescendantSequenceState := DescendantSequenceState + 10;

	10: // Copy Mode names
		FOR i := 1 TO 10 DO
			ModeNames[i] := F_UnitModeToString(UDINT_TO_DINT(i));
		END_FOR

		DescendantSequenceState := DescendantSequenceState + 10;

	20: // Call the Super 
		IF SUPER^.Initialize() THEN
			Initialize := TRUE;
		END_IF
END_CASE]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="InfeedModule">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="InfeedModule.CyclicLogic">
      <LineId Id="18" Count="4" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="InfeedModule.Initialize">
      <LineId Id="81" Count="21" />
      <LineId Id="11" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>