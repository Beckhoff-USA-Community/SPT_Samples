<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_DrawAxis" Id="{6f7f3fdd-1761-46b2-a834-6c3784a9206a}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
FUNCTION_BLOCK FB_DrawAxis EXTENDS FB_PackML_BaseModule
VAR
	Axis	  : FB_Component_BasicSlaveAxis := (Name := 'Draw Axis');
	MasterRef : REFERENCE TO AXIS_REF;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Methods" Id="{1459c28b-8a12-4641-8a5e-d74da0b71b0d}" />
    <Folder Name="Properties" Id="{2a6d81ec-4259-4ac1-afbc-17e71288b5f6}" />
    <Method Name="Aborting" Id="{d947f5e2-2d16-49a5-9815-3f039233a9f0}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PROTECTED Aborting]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Mode is ignored
CASE SequenceState OF
	0:
		NoStateTasksToComplete := FALSE;
		SequenceState		   := SequenceState + 10;

	10: // Stop Axis
		Axis.Override := 100;
		Axis.Stop(); // This will also GearOut by default
		IF Axis.Stopped THEN
			SequenceState := SequenceState + 10;
		END_IF

	20: // Disable Axis
		Axis.Disable();
		IF NOT Axis.Enabled THEN
			StateTasksComplete := TRUE;
		END_IF
END_CASE

SUPER^.Aborting();]]></ST>
      </Implementation>
    </Method>
    <Property Name="AxisRef" Id="{6a546205-aa1a-4058-a964-b861546a6b3a}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY AxisRef : REFERENCE TO AXIS_REF]]></Declaration>
      <Get Name="Get" Id="{c2ba8eac-8f12-4d77-bfd7-5fb7b5eee94d}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[AxisRef REF= Axis.Axis;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Completing" Id="{1a88739c-e241-40e6-932c-4e770d465d42}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PROTECTED Completing]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	ePMLUnitMode_Production:
		CASE SequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				SequenceState		   := SequenceState + 10;

			10: // Wait for Master Axis to Stop and GearOut, or Stop
				IF Axis.InGear AND Axis.Stopped THEN
					Axis.GearOut();
				ELSIF NOT Axis.InGear THEN
					Axis.Stop();
				END_IF

				IF Axis.Stopped THEN
					StateTasksComplete := TRUE;
				END_IF
		END_CASE
END_CASE

SUPER^.Completing();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicLogic" Id="{071f67bd-24e9-4734-8fa9-d70acebb508f}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC CyclicLogic]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _InitComplete THEN
	_InitComplete := Initialize();
	RETURN;
END_IF

SUPER^.CyclicLogic();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{aa1d8f3c-de5d-440d-88b2-cf20a1bca6eb}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PROTECTED Initialize : BOOL;
VAR
	i : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Initialize := FALSE;
CASE DescendantSequenceState OF
	0: // Register Components
		RegisterComponent(Axis);

		// Set Config
		_LogModeChanges			:= FALSE;
		_LogStateChanges		:= FALSE;
		DescendantSequenceState := DescendantSequenceState + 10;

	10: // Copy Mode names
		FOR i := 1 TO 10 DO
			ModeNames[i] := F_UnitModeToString(UDINT_TO_DINT(i));
		END_FOR

		DescendantSequenceState := DescendantSequenceState + 10;

	20:
		IF SUPER^.Initialize() THEN
			DescendantSequenceState := DescendantSequenceState + 10;
		END_IF

	30:
		Initialize := TRUE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Property Name="MasterAxisRef" Id="{c8aeeb47-6497-45ee-b23a-b03bca698c96}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY MasterAxisRef : REFERENCE TO AXIS_REF]]></Declaration>
      <Set Name="Set" Id="{4c5a7eeb-c2c9-4a9d-9b74-c57a2ad6979d}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[MasterRef REF= MasterAxisRef;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Starting" Id="{08b85550-4819-4b11-b046-f4ec48d539b6}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PROTECTED Starting]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CommandedMode OF
	ePMLProtUnitMode_Production:
		CASE SequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				SequenceState		   := SequenceState + 10;

			10: // Enable Axis
				Axis.Enable();
				IF Axis.Enabled THEN
					SequenceState := SequenceState + 10;
				END_IF

			20: // Set reference to Master and Couple Axes
				Axis.Master1 REF= MasterRef;
				Axis.GearIn();
				IF Axis.InGear THEN
					StateTasksComplete := TRUE;
				END_IF
		END_CASE
END_CASE

SUPER^.Starting();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Stopping" Id="{2444f023-ed59-4632-8f42-8076dedaa106}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PROTECTED Stopping]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	ePMLUnitMode_Production:
		CASE SequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				SequenceState		   := SequenceState + 10;

			10: // Stop Axis
				Axis.Override := 100;
				Axis.Stop(); // This will also GearOut by default
				IF Axis.Stopped THEN
					StateTasksComplete := TRUE;
				END_IF
		END_CASE
END_CASE

SUPER^.Stopping();]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_DrawAxis">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_DrawAxis.Aborting">
      <LineId Id="432" Count="19" />
      <LineId Id="335" Count="0" />
    </LineIds>
    <LineIds Name="FB_DrawAxis.AxisRef.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_DrawAxis.Completing">
      <LineId Id="671" Count="19" />
      <LineId Id="25" Count="0" />
    </LineIds>
    <LineIds Name="FB_DrawAxis.CyclicLogic">
      <LineId Id="27" Count="4" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_DrawAxis.Initialize">
      <LineId Id="283" Count="23" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_DrawAxis.MasterAxisRef.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_DrawAxis.Starting">
      <LineId Id="583" Count="21" />
      <LineId Id="137" Count="0" />
    </LineIds>
    <LineIds Name="FB_DrawAxis.Stopping">
      <LineId Id="287" Count="15" />
      <LineId Id="204" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>