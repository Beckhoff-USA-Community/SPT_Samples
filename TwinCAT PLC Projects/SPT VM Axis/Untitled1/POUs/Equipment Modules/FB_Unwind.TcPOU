<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Unwind" Id="{531fe024-1c35-49f6-9ea6-b83468bb853c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Unwind EXTENDS FB_PackML_BaseModule
VAR
	Axis	  : FB_Component_BasicSlaveAxis := (Name := 'Unwind Axis');
	MasterRef : REFERENCE TO AXIS_REF;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Aborting" Id="{0e94a613-0e2d-43e0-9b59-861775c0ebdb}">
      <Declaration><![CDATA[METHOD PROTECTED Aborting]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Mode is ignored
CASE SequenceState OF
	0:
		NoStateTasksToComplete := FALSE;
		SequenceState		   := SequenceState + 10;

	10: // Stop Axis
		Axis.Override := 100;
		Axis.Stop(); // This will also GearOut
		IF Axis.Stopped THEN
			SequenceState := SequenceState + 10;
		END_IF

	20: // Disable Axis
		Axis.Disable();
		IF NOT Axis.Enabled THEN
			StateTasksComplete := TRUE;
		END_IF
END_CASE

SUPER^.Aborting();]]></ST>
      </Implementation>
    </Method>
    <Property Name="AxisRef" Id="{d13e3860-08f0-4ce9-b897-f8cfcdba7e93}">
      <Declaration><![CDATA[PROPERTY AxisRef : REFERENCE TO AXIS_REF]]></Declaration>
      <Get Name="Get" Id="{e4cb4012-07fb-4a4b-a3d7-60c1cc05d1d7}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[AxisRef REF= Axis.Axis;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Completing" Id="{2b5befec-31ac-4e0e-8a6d-577805b741ec}">
      <Declaration><![CDATA[METHOD PROTECTED Completing]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	ePMLUnitMode_Production:
		CASE SequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				SequenceState		   := SequenceState + 10;

			10: // Wait for Master Axis to Stop and GearOut, or Stop
				IF Axis.InGear AND Axis.Stopped THEN
					Axis.GearOut();
				ELSIF NOT Axis.InGear THEN
					Axis.Stop();
				END_IF

				IF Axis.Stopped THEN
					StateTasksComplete := TRUE;
				END_IF
		END_CASE
END_CASE

SUPER^.Completing();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicLogic" Id="{761193c7-ca9e-4580-b131-82e57b210c90}">
      <Declaration><![CDATA[METHOD PUBLIC CyclicLogic]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT InitComplete THEN
	_InitComplete := Initialize();
	RETURN;
END_IF

SUPER^.CyclicLogic();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{e3a8ca4b-f177-4610-88fe-7274fe30d43b}">
      <Declaration><![CDATA[METHOD PROTECTED Initialize : BOOL;
VAR
	i : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Initialize := FALSE;
CASE DescendantSequenceState OF
	0: // Register Components
		RegisterComponent(Axis);

		// Set Config
		_LogModeChanges			:= FALSE;
		_LogStateChanges		:= FALSE;
		DescendantSequenceState := DescendantSequenceState + 10;

	10:
		// Copy Mode names
		FOR i := 1 TO 10 DO
			ModeNames[i] := F_UnitModeToString(UDINT_TO_INT(i));
		END_FOR

		DescendantSequenceState := DescendantSequenceState + 10;

	20:
		IF SUPER^.Initialize() THEN
			DescendantSequenceState := DescendantSequenceState + 10;
		END_IF

	30:
		Initialize := TRUE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Property Name="MasterAxisRef" Id="{3374daa1-7f61-440f-abd3-569198fd16f3}">
      <Declaration><![CDATA[PROPERTY MasterAxisRef : REFERENCE TO AXIS_REF]]></Declaration>
      <Set Name="Set" Id="{5f9e248d-d1a0-4f8f-bf65-7d19780c479a}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[MasterRef REF= MasterAxisRef;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Starting" Id="{edea4660-a85a-4b0f-83e4-8557ebe4b1fc}">
      <Declaration><![CDATA[METHOD PROTECTED Starting]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CommandedMode OF
	ePMLProtUnitMode_Production:
		CASE SequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				SequenceState		   := SequenceState + 10;

			10: // Enable Axis
				Axis.Enable();
				IF Axis.Enabled THEN
					SequenceState := SequenceState + 10;
				END_IF

			20: // Set reference to Master and Couple Axes
				Axis.Master1	  REF= MasterRef;
				Axis.RatioMaster1 := 0.5; // Can be set at anytime and changed while in motion
				Axis.GearIn();
				IF Axis.InGear THEN
					StateTasksComplete := TRUE;
				END_IF
		END_CASE
END_CASE

SUPER^.Starting();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Stopping" Id="{c55df479-e1d7-47c1-8f42-c67178fb7cf3}">
      <Declaration><![CDATA[METHOD PROTECTED Stopping]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	ePMLUnitMode_Production:
		CASE SequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				SequenceState		   := SequenceState + 10;

			10: // Stop Axis
				Axis.Override := 100;
				Axis.Stop(); // This will also GearOut
				IF Axis.Stopped THEN
					StateTasksComplete := TRUE;
				END_IF
		END_CASE
END_CASE

SUPER^.Stopping();]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Unwind">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Unwind.Aborting">
      <LineId Id="478" Count="19" />
      <LineId Id="381" Count="0" />
    </LineIds>
    <LineIds Name="FB_Unwind.AxisRef.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Unwind.Completing">
      <LineId Id="356" Count="19" />
      <LineId Id="25" Count="0" />
    </LineIds>
    <LineIds Name="FB_Unwind.CyclicLogic">
      <LineId Id="34" Count="4" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_Unwind.Initialize">
      <LineId Id="216" Count="24" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_Unwind.MasterAxisRef.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Unwind.Starting">
      <LineId Id="320" Count="22" />
      <LineId Id="137" Count="0" />
    </LineIds>
    <LineIds Name="FB_Unwind.Stopping">
      <LineId Id="187" Count="15" />
      <LineId Id="126" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>