<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Outfeed" Id="{e948bf20-f0b6-46b0-a57a-2af964224def}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Outfeed EXTENDS FB_PackML_BaseModule
VAR
	VelocityAxis   : FB_Component_BasicAxis := (Name := 'Velocity Axis');
	ExtSetpointGen : FB_ExternalSetpointGenerator;
	Stop		   : BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Aborting" Id="{43b0d5d1-0b34-4df9-abc6-77c43e338e59}">
      <Declaration><![CDATA[// This method contains code which will execute when this PackML module is in the Aborting state
METHOD PROTECTED Aborting

// Note: The Abort command should be associated with the fault handing routine of a module. It should not be directly commanded from any user inteface. 

// This method is called as required by <c>StateControl()</c>
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE SequenceState OF
	0:
		NoStateTasksToComplete := FALSE;
		SequenceState		   := SequenceState + 10;

	10:
		IF NOT VelocityAxis.Error THEN
			IF VelocityAxis.Stop() THEN
				SequenceState := SequenceState + 10;
			END_IF
		ELSE
			SequenceState := SequenceState + 10;
		END_IF

	20:
		IF VelocityAxis.Stopped THEN
			SequenceState := SequenceState + 10;
		END_IF

	30:
		IF VelocityAxis.Disable() THEN
			SequenceState := SequenceState + 10;
		END_IF

	40:
		IF NOT VelocityAxis.Enabled THEN
			SequenceState := SequenceState + 10;
		END_IF

	50:
		IF ExtSetpointGen.Disable() THEN
			SequenceState := SequenceState + 10;
		END_IF

	60:
		StateTasksComplete := TRUE;
END_CASE

SUPER^.Aborting();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clearing" Id="{efefb995-793d-416a-9b69-702844c41757}">
      <Declaration><![CDATA[// This method contains code which will execute when this PackML module is in the Clearing state
METHOD PROTECTED Clearing
VAR
	i				: UDINT;
	SubModulesReady : BOOL := TRUE;
END_VAR

// Note: The Clear command can also be thought of as a fault reset depite the ambiguity in the naming of the Reset state. 

// This method is called as required by <c>StateControl()</c>
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE SequenceState OF
	0:
		NoStateTasksToComplete := FALSE;
		SequenceState		   := SequenceState + 10;

	10:
		IF VelocityAxis.Reset() THEN
			SequenceState := SequenceState + 10;
		END_IF

	20:
		IF NOT VelocityAxis.Error THEN
			SequenceState := SequenceState + 10;
		END_IF

		StateTasksComplete := TRUE;
END_CASE

SUPER^.Clearing();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Execute" Id="{93af2509-69ae-4bef-9bf6-de48ad55d413}">
      <Declaration><![CDATA[// This method contains code which will execute when this PackML module is in the Execute state
METHOD PROTECTED Execute
VAR
	

END_VAR

(*
The base implementation of this method is empty. User must override this method to provide functionality.
This method is called as required by StateControl()
*)
VAR
	Position : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	E_PMLUnitMode.ePMLUnitMode_Production:
		CASE SequenceState OF
			0:
				ExtSetpointGen.Direction   := 1;
				ExtSetpointGen.Destination := 0.0;
				ExtSetpointGen.Velocity	   := 0.0;
				ExtSetpointGen.Accel	   := 0.0;
				SequenceState			   := 10;

			10:
				IF VelocityAxis.RunExternalSequence() THEN
					SequenceState := 20;
				END_IF

			20:
				IF VelocityAxis.Axis.Status.HasJob THEN
					SequenceState := 30;
				END_IF

			30: // Raise Velocity

				//ExtSetpointGen.Velocity := VelocityAxis.ActualVelocity + ((100.0 - VelocityAxis.ActualVelocity) * 0.01);
				ExtSetpointGen.Velocity := ExtSetpointGen.Velocity + 0.01;
				IF Stop THEN
					Stop		  := FALSE;
					SequenceState := 40;
				END_IF

			40: // Reduce Velocity to 0

				//ExtSetpointGen.Velocity := VelocityAxis.ActualVelocity - ((0.0 - VelocityAxis.ActualVelocity) * 0.01);
				ExtSetpointGen.Velocity := ExtSetpointGen.Velocity - 0.01;
				IF (ExtSetpointGen.Velocity <= 1.0) AND (VelocityAxis.ActualVelocity = 0) THEN
					SequenceState := 50;
				END_IF

			50:
				IF ExtSetpointGen.Disable() THEN
					SequenceState := 60;
				END_IF

			60:
				;
		END_CASE
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{e3d83f98-ed74-4b99-8e16-5707372c199a}">
      <Declaration><![CDATA[// Basic module initialization logic
METHOD PROTECTED Initialize : BOOL;
VAR
END_VAR

// This method is called by CyclicLogic() as required]]></Declaration>
      <Implementation>
        <ST><![CDATA[Initialize := FALSE;
CASE DescendantSequenceState OF
	0:
		RegisterComponent(Component := VelocityAxis);
		DescendantSequenceState := DescendantSequenceState + 10;

	10:
		IF SUPER^.Initialize() THEN
			VelocityAxis.ExternalSequence	:= ExtSetpointGen;
			DescendantSequenceState := DescendantSequenceState + 10;
		END_IF

	20:
		Initialize := TRUE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Resetting" Id="{98759c75-0602-4f28-90ed-a645ad15f32d}">
      <Declaration><![CDATA[METHOD PROTECTED Resetting
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE SequenceState OF
	0:
		NoStateTasksToComplete := FALSE;
		SequenceState		   := SequenceState + 10;

	10:
		IF VelocityAxis.Enable() THEN
			SequenceState := SequenceState + 10;
		END_IF

	20:
		IF VelocityAxis.Enabled THEN
			SequenceState := SequenceState + 10;
		END_IF

	30:
		StateTasksComplete := TRUE;
END_CASE

SUPER^.Resetting();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>