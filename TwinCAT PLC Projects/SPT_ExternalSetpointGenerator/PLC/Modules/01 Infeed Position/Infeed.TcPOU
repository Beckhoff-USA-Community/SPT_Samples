<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Infeed" Id="{0bcf2b52-7ec2-4292-b061-d82e0eb4dd73}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Infeed EXTENDS FB_PackML_BaseModule
VAR
	PositionAxis   : FB_Component_BasicAxis := (Name := 'Position Axis');
	ExtSetpointGen : FB_ExternalSetpointGenerator;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Aborting" Id="{22e9bc00-c001-4792-8e0c-9e46bc3906e9}">
      <Declaration><![CDATA[// This method contains code which will execute when this PackML module is in the Aborting state
METHOD PROTECTED Aborting
VAR
	i				: UDINT;
	SubModulesReady : BOOL := TRUE;
END_VAR

// Note: The Abort command should be associated with the fault handing routine of a module. It should not be directly commanded from any user inteface. 

// This method is called as required by <c>StateControl()</c>
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE SequenceState OF
	0:
		NoStateTasksToComplete := FALSE;
		SequenceState		   := SequenceState + 10;

	10:
		IF NOT PositionAxis.Error THEN
			IF PositionAxis.Stop() THEN
				SequenceState := SequenceState + 10;
			END_IF
		ELSE
			SequenceState := SequenceState + 10;
		END_IF

	20:
		IF PositionAxis.Stopped THEN
			SequenceState := SequenceState + 10;
		END_IF

	30:
		IF PositionAxis.Disable() THEN
			SequenceState := SequenceState + 10;
		END_IF

	40:
		IF NOT PositionAxis.Enabled THEN
			SequenceState := SequenceState + 10;
		END_IF

	50:
		IF ExtSetpointGen.Disable() THEN
			SequenceState := SequenceState + 10;
		END_IF

	60:
		StateTasksComplete := TRUE;
END_CASE

SUPER^.Aborting();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clearing" Id="{3b500a04-f47d-487a-b737-898d3c9f4cfd}">
      <Declaration><![CDATA[// This method contains code which will execute when this PackML module is in the Clearing state
METHOD PROTECTED Clearing
VAR
	i				: UDINT;
	SubModulesReady : BOOL := TRUE;
END_VAR

// Note: The Clear command can also be thought of as a fault reset depite the ambiguity in the naming of the Reset state. 

// This method is called as required by <c>StateControl()</c>
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE SequenceState OF
	0:
		NoStateTasksToComplete := FALSE;
		SequenceState		   := SequenceState + 10;

	10:
		IF PositionAxis.Reset() THEN
			SequenceState := SequenceState + 10;
		END_IF

	20:
		IF NOT PositionAxis.Error THEN
			SequenceState := SequenceState + 10;
		END_IF

		StateTasksComplete := TRUE;
END_CASE

SUPER^.Clearing();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Execute" Id="{4883edbf-5676-44d4-88e6-18721f181889}">
      <Declaration><![CDATA[// This method contains code which will execute when this PackML module is in the Execute state
METHOD PROTECTED Execute

(*
The base implementation of this method is empty. User must override this method to provide functionality.
This method is called as required by StateControl()
*)

VAR
	Position: LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	E_PMLUnitMode.ePMLUnitMode_Production:
		CASE SequenceState OF
			0:
				ExtSetpointGen.Direction   := 1;
				ExtSetpointGen.Destination := 100.0;
				ExtSetpointGen.Velocity	   := 0.0;
				ExtSetpointGen.Accel	   := 0.0;
				SequenceState			   := 10;

			10:
				IF PositionAxis.RunExternalSequence() THEN
					SequenceState := 20;
				END_IF

			20:
				IF PositionAxis.Axis.Status.HasJob THEN
					SequenceState := 30;
				END_IF

			30: // Move from 0 to Destination
				Position				:= PositionAxis.ActualPosition + ((ExtSetpointGen.Destination - PositionAxis.ActualPosition) * 0.01);
				ExtSetpointGen.Position := Position;
				IF PositionAxis.InPosition THEN
					SequenceState := 40;
				END_IF

			40:
				IF ExtSetpointGen.Disable() THEN
					SequenceState := 50;
				END_IF

			50:
				;
		END_CASE
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{a90989da-9185-4daa-bb74-7f6195b68e99}">
      <Declaration><![CDATA[// Basic module initialization logic
METHOD PROTECTED Initialize : BOOL;
VAR
END_VAR

// This method is called by CyclicLogic() as required]]></Declaration>
      <Implementation>
        <ST><![CDATA[Initialize := FALSE;
CASE DescendantSequenceState OF
	0:
		RegisterComponent(Component := PositionAxis);
		DescendantSequenceState := DescendantSequenceState + 10;

	10:
		IF SUPER^.Initialize() THEN
			PositionAxis.ExternalSequence	:= ExtSetpointGen;
			DescendantSequenceState := DescendantSequenceState + 10;
		END_IF

	20:
		Initialize := TRUE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Resetting" Id="{3d1b53cb-4fac-4d3d-9bee-04f00ee33a88}">
      <Declaration><![CDATA[METHOD PROTECTED Resetting
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE SequenceState OF
	0:
		NoStateTasksToComplete := FALSE;
		SequenceState		   := SequenceState + 10;

	10:
		IF PositionAxis.Enable() THEN
			SequenceState := SequenceState + 10;
		END_IF

	20:
		IF PositionAxis.Enabled THEN
			SequenceState := SequenceState + 10;
		END_IF

	30:
		StateTasksComplete := TRUE;
END_CASE

SUPER^.Resetting();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>